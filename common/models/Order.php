<?php

namespace common\models;

use Yii;
use yii\behaviors\TimestampBehavior;
use common\models\Offer;
use common\models\Order;
use frontend\models\ComplaintOrder;

/**
 * This is the model class for table "{{%order}}".
 *
 * @property integer $ID
 * @property string $created_at
 * @property string $updated_at
 * @property integer $categoryID
 * @property integer $userID
 * @property integer $productID
 * @property integer $regionID
 * @property string $filter
 * @property string $comment
 * @property string $priceFrom
 * @property string $priceTo
 * @property string $deadLine
 * @property integer $status
 * @property integer $send
 *
 * @property Offer[] $offers
 * @property Offer $bestOffer
 * @property Comment $userComment
 * @property Comment $userRefuse
 * @property Category $category
 * @property User $user
 * @property Product $product
 * @property Notification $notification
 */
class Order extends \yii\db\ActiveRecord
{
    const STATUS_ACTIVE = 1;
    const STATUS_DISABLE = 0;

    public $is_active;

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%order}}';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['categoryID', 'userID', 'productID', 'regionID'], 'integer'],
            [['filter', 'comment'], 'string'],
            [
                ['comment', 'filter'],
                function ($attribute, $params) {
                    $this->$attribute = strip_tags($this->$attribute);
                }
            ],
            //[['priceFrom', 'priceTo'], 'number', 'min' => 0],
            //[['priceFrom', 'deadLine'], 'required'],
            [['created_at', 'updated_at', 'status', 'send'], 'safe'],
            [
                ['categoryID'],
                'exist',
                'skipOnError' => true,
                'targetClass' => Category::className(),
                'targetAttribute' => ['categoryID' => 'ID']
            ],
            [
                ['userID'],
                'exist',
                'skipOnError' => true,
                'targetClass' => User::className(),
                'targetAttribute' => ['userID' => 'ID']
            ],
            [
                ['productID'],
                'exist',
                'skipOnError' => true,
                'targetClass' => Product::className(),
                'targetAttribute' => ['productID' => 'ID']
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'ID' => Yii::t('app', 'ID'),
            'created_at' => Yii::t('app', 'Created At'),
            'updated_at' => Yii::t('app', 'Updated At'),
            'categoryID' => Yii::t('app', 'Category ID'),
            'userID' => Yii::t('app', 'User ID'),
            'productID' => Yii::t('app', 'Product ID'),
            'regionID' => Yii::t('app', 'Region ID'),
            'filter' => Yii::t('app', 'Filter'),
            'comment' => Yii::t('app', 'Comment'),
            'priceFrom' => Yii::t('app', 'Ціна'),
            'priceTo' => Yii::t('app', 'Price To'),
            'deadLine' => Yii::t('app', 'Dead Line')
        ];
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::className(),
                'createdAtAttribute' => 'created_at',
                'updatedAtAttribute' => 'updated_at',
                'value' => function () {
                    return date('Y-m-d H:i:s');
                },
            ],
        ];
    }

    public function afterFind()
    {
        parent::afterFind(); // TODO: Change the autogenerated stub

        $this->is_active = false;
        if (($this->deadLine >= date('Y-m-d H:i:s', time())) && $this->status == self::STATUS_ACTIVE) {
            $this->is_active = true;
        }
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getOffers()
    {
        return $this->hasMany(Offer::className(),
            ['orderID' => 'ID'])->where('{{%offer}}.status <> ' . Offer::STATUS_REJECTED . ' OR {{%offer}}.status IS NULL');
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getBestOffer()
    {
        return $this->hasOne(Offer::className(), ['orderID' => 'ID'])->orderBy('price ASC')->limit(1);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCategory()
    {
        return $this->hasOne(Category::className(), ['ID' => 'categoryID']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUser()
    {
        return $this->hasOne(User::className(), ['ID' => 'userID']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getProduct()
    {
        return $this->hasOne(Product::className(), ['ID' => 'productID']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getNotification()
    {
        return $this->hasOne(Notification::className(),
            ['objectID' => 'ID'])->where(['type' => Notification::TYPE_ORDER])->andWhere(['userID' => Yii::$app->user->id]);
    }

    /**
     * @param $id integer|null
     *
     * @return \yii\db\ActiveQuery
     */
    public function getUserComment($id = null)
    {
        if (Yii::$app->user->identity->role == User::ROLE_SELLER) {
            return $this->hasOne(Comment::className(),
                ['UserFromID' => 'userID'])->where(['orderID' => $this->ID])->andWhere('refuseID IS NULL')->andWhere(['UserToID' => Yii::$app->user->id]);
        } elseif (Yii::$app->user->identity->role == User::ROLE_USER) {
            return $this->hasOne(Comment::className(),
                ['UserFromID' => 'userID'])->where(['orderID' => $this->ID])->andWhere('refuseID IS NULL')->andWhere(['UserToID' => $id])->one();
        }
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUserRefuse()
    {
        return $this->hasOne(Comment::className(),
            ['UserFromID' => 'userID'])->where(['offerID' => $this->ID])->andWhere('refuseID IS NOT NULL');
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getActiveSellers()
    {
        return User2category::find()->where(['categoryID' => $this->categoryID])->count();
    }

    /**
     * @return int
     */
    public function getID()
    {
        return $this->ID;
    }

    /**
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->created_at;
    }

    /**
     * @param string $createdAt
     * @return Order
     */
    public function setCreatedAt(string $createdAt)
    {
        $this->created_at = $createdAt;
        return $this;
    }

    /**
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->updated_at;
    }

    /**
     * @param string $updatedAt
     * @return Order
     */
    public function setUpdatedAt(string $updatedAt)
    {
        $this->updated_at = $updatedAt;
        return $this;
    }

    /**
     * @return int
     */
    public function getUserId():int
    {
        return $this->userID;
    }

    /**
     * @param int $userId
     * @return Order
     */
    public function setUserId(int $userId):Order
    {
        $this->userID = $userId;
        return $this;
    }

    /**
     * @return string
     */
    public function getComment()
    {
        return $this->comment;
    }

    /**
     * @param $comment
     * @return Order
     */
    public function setComment($comment)
    {
        $this->comment = $comment;
        return $this;
    }

    /**
     * @return string
     */
    public function getPriceFrom()
    {
        return $this->priceFrom;
    }

    /**
     * @param $priceFrom
     * @return Order
     */
    public function setPriceFrom($priceFrom)
    {
        $this->priceFrom = $priceFrom;
        return $this;
    }

    /**
     * @return int|null
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * @param $status
     * @return Order
     */
    public function setStatus($status)
    {
        $this->status = $status;
        return $this;
    }

    public function hasOrderOffer($order_id) {
        $offer = Offer::findOne(['orderID' => $order_id]);
        $order = Order::findOne(['ID' => $order_id]);
        $order_date = strtotime($order->deadLine);
        $current_date = strtotime(date('Y-m-d') . ' 00:00:00');
        $complaint_order = ComplaintOrder::find()
                                        ->andWhere(['sellerID' => Yii::$app->user->id])
                                        ->andWhere(['orderID' => $order_id])
                                        ->all();

        if ($offer || $complaint_order || ($current_date > $order_date)) return false;
        return true;
    }
}
