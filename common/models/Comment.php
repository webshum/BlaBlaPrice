<?php

namespace common\models;

use Yii;
use yii\behaviors\TimestampBehavior;

/**
 * This is the model class for table "{{%comment}}".
 *
 * @property integer $ID
 * @property string $created_at
 * @property string $updated_at
 * @property integer $userFromID
 * @property integer $userToID
 * @property integer $offerID
 * @property integer $refuseID
 * @property integer $rating
 * @property string $comment
 *
 * @property User $userFrom
 * @property User $userTo
 */
class Comment extends \yii\db\ActiveRecord
{
    const RATING_BAD = 0;
    const RATING_NEUTRAL = 1;
    const RATING_GOOD = 2;

    public $class = '';
    public $name = '';

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%comment}}';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['userFromID', 'userToID', 'rating', 'refuseID', 'offerID'], 'integer'],
            [['comment'], 'string'],
            [
                ['comment'],
                function ($attribute, $params) {
                    $this->$attribute = strip_tags($this->$attribute);
                }
            ],
            [['created_at', 'updated_at'], 'safe'],
            [
                ['userFromID'],
                'exist',
                'skipOnError' => true,
                'targetClass' => User::className(),
                'targetAttribute' => ['userFromID' => 'ID']
            ],
            [
                ['userToID'],
                'exist',
                'skipOnError' => true,
                'targetClass' => User::className(),
                'targetAttribute' => ['userToID' => 'ID']
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function afterFind()
    {
        parent::afterFind(); // TODO: Change the autogenerated stub

        switch ($this->rating) {
            case self::RATING_BAD :
                $this->class = 'negative';
                $this->name = Yii::t('app', 'Ненадійний');
                break;
            case self::RATING_NEUTRAL :
                $this->class = 'neutral';
                $this->name = Yii::t('app', 'Нейтральний');
                break;
            case self::RATING_GOOD :
                $this->class = 'positive';
                $this->name = Yii::t('app', 'Надійний');
                break;
        }
    }

    static public function Rating($id)
    {
        switch ($id) {
            case self::RATING_BAD :
                return ['class' => 'negative', 'name' => Yii::t('app', 'Ненадійний')];
            case self::RATING_NEUTRAL :
                return ['class' => 'neutral', 'name' => Yii::t('app', 'Нейтральний')];
            case self::RATING_GOOD :
                return ['class' => 'positive', 'name' => Yii::t('app', 'Надійний')];
        }
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::className(),
                'createdAtAttribute' => 'created_at',
                'updatedAtAttribute' => 'updated_at',
                'value' => function () {
                    return date('Y-m-d H:i:s');
                },
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'ID' => Yii::t('app', 'ID'),
            'created_at' => Yii::t('app', 'Created'),
            'updated_at' => Yii::t('app', 'Updated'),
            'userFromID' => Yii::t('app', 'User From ID'),
            'userToID' => Yii::t('app', 'User To ID'),
            'offerID' => Yii::t('app', 'Offer ID'),
            'refuseID' => Yii::t('app', 'Refuse ID'),
            'rating' => Yii::t('app', 'Rating'),
            'comment' => Yii::t('app', 'Comment')
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUserFrom()
    {
        return $this->hasOne(User::className(), ['ID' => 'userFromID']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUserTo()
    {
        return $this->hasOne(User::className(), ['ID' => 'userToID']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getOffer()
    {
        return $this->hasOne(Offer::className(), ['ID' => 'offerID']);
    }

    /**
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->updated_at;
    }

    /**
     * @param $updatedAt
     * @return Comment
     */
    public function setUpdatedAt($updatedAt)
    {
        $this->updated_at = $updatedAt;
        return $this;
    }
}
