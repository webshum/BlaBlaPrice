<?php

namespace common\models;

use Yii;
use yii\behaviors\TimestampBehavior;
use common\components\behaviors\ImageBehavior;
use common\models\Category;

/**
 * This is the model class for table "{{%offer}}".
 *
 * @property integer $ID
 * @property string $created_at
 * @property string $updated_at
 * @property integer $userID
 * @property integer $orderID
 * @property string $price
 * @property string $comment
 * @property string $image
 * @property string $accepted
 * @property string $oldPrice
 * @property integer $status
 * @property integer $paid
 *
 * @property User $user
 * @property Order $order
 * @property Comment $sellerComment
 * @property Comment $sellerRefuse
 * @property Notification $notification
 * @property OfferImage[] $offerImage
 *
 * @mixin ImageBehavior
 */
class Offer extends \yii\db\ActiveRecord
{
    const OFFER_ACCEPTED = 1;

    const STATUS_ACCEPTED = 1;
    const STATUS_REJECTED = 2;

    const PAID = 1;

    public $offerImage;

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%offer}}';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [
                ['offerImage'],
                'file', /*'maxSize' => 4,*/
                'extensions' => ['jpg'],
                'maxSize' => 1024 * 3072
            ],
            [['userID', 'orderID', 'categoryID'], 'integer'],
            [['price'], 'number', 'min' => 0],
            [['price'], 'required'],
            [['comment', 'image'], 'string'],
            [
                ['comment'],
                function ($attribute, $params) {
                    $this->$attribute = strip_tags($this->$attribute);
                }
            ],
            [['created_at', 'updated_at', 'accepted'], 'safe'],
            [
                ['userID'],
                'exist',
                'skipOnError' => true,
                'targetClass' => User::className(),
                'targetAttribute' => ['userID' => 'ID']
            ],
            [
                ['orderID'],
                'exist',
                'skipOnError' => true,
                'targetClass' => Order::className(),
                'targetAttribute' => ['orderID' => 'ID']
            ],
            
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'ID' => Yii::t('app', 'ID'),
            'created_at' => Yii::t('app', 'Created At'),
            'updated_at' => Yii::t('app', 'Updated At'),
            'userID' => Yii::t('app', 'User ID'),
            'orderID' => Yii::t('app', 'Order ID'),
            'price' => Yii::t('app', 'Price'),
            'comment' => Yii::t('app', 'Comment'),
            'image' => Yii::t('app', 'Image'),
            'accepted' => Yii::t('app', 'Accepted')
        ];
    }

    /**
     * @inheritdoc
     */
    public function afterFind()
    {
        parent::afterFind(); // TODO: Change the autogenerated stub
        $this->offerImage = OfferImage::findOne(['offerID' => $this->ID]);
    }

    /**
     * @inheritdoc
     */
    public function beforeSave($insert)
    {
        if (parent::beforeSave($insert) && $this->validate()) {
            if ($this->oldAttributes != null && $this->oldAttributes['price'] != null) {
                $this->oldPrice = $this->oldAttributes['price'];
                ++$this->user->priceDown;
                $this->user->save();
            }
            return true;
        } else {
            return false;
        }
    }

    /**
     * @inheritdoc
     */
    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub

        if ($this->offerImage) {

            $offerImage = OfferImage::findOne(['offerID' => $this->ID]);

            if (!$offerImage) {
                $offerImage = new OfferImage();
            }

            //foreach ($this->offerImage as $image_item) {
            $offerImage->offerID = $this->ID;
            $offerImage->image = $this->offerImage;
            $offerImage->save();
            //}
        }
    }

    /**
     * @return bool
     */
    public function upload()
    {
        $tmp = $this->offerImage['tmp_name'];

        $parts = explode('.', $this->offerImage['name']);
        $file_ext = strtolower(end($parts));
        $filename = uniqid() . '.' . $file_ext;

        $uploaddir = './uploads/';
        $download = $_SERVER['HTTP_ORIGIN'] . '/uploads/';

        if (!is_dir($uploaddir)) {
            mkdir($uploaddir, 0777, true);
        }

        move_uploaded_file($tmp, $uploaddir . $filename);

        echo $download . $filename;
    }


    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::className(),
                'createdAtAttribute' => 'created_at',
                'updatedAtAttribute' => 'updated_at',
                'value' => function () {
                    return date('Y-m-d H:i:s');
                },
            ],
            'ImageBehaviorGallery' => [
                'class' => ImageBehavior::className(),
                'path' => '/uploads',
                'attribute' => 'offerImage'
            ],
        ];
    }

    public function getCommision($categoryID) {
        $str = '/kata/' .  $categoryID . '/';
        $category = Category::findOne(['seolink' => $str]);

        return $category->price;
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUser()
    {
        return $this->hasOne(User::className(), ['ID' => 'userID']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getOrder()
    {
        return $this->hasOne(Order::className(), ['ID' => 'orderID']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getNotification()
    {
        return $this->hasOne(Notification::className(),
            ['objectID' => 'ID'])->where(['type' => Notification::TYPE_OFFER]);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSellerComment()
    {
        return $this->hasOne(Comment::className(), ['UserFromID' => 'userID'])
            ->where(['offerID' => $this->orderID])
            ->andWhere('refuseID IS NULL')
            ->andWhere(['UserToID' => Yii::$app->user->id]);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSellerRefuse()
    {
        return $this->hasOne(Comment::className(), ['UserFromID' => 'userID'])
            ->where(['offerID' => $this->orderID])
            ->andWhere('refuseID IS NOT NULL');
    }

    /**
     * @param $user integer
     *
     * @return \yii\db\ActiveQuery
     */
    public function getComment($user)
    {
        return $this->hasOne(Comment::className(), ['offerID' => 'ID'])
            ->where(['{{%comment}}.userFromID' => $user])
            ->andWhere('{{%comment}}.refuseID IS NULL');
    }

    /**
     * @param $user integer
     *
     * @return \yii\db\ActiveQuery
     */
    public function getRefuse($user)
    {
        return $this->hasOne(Comment::className(), ['offerID' => 'ID'])
            ->andWhere(['{{%comment}}.userFromID' => $user])
            ->andWhere('{{%comment}}.refuseID IS NOT NULL');
    }

    /**
     * @param $user integer
     *
     * @return \yii\db\ActiveQuery
     */
    public function getAnswer($user)
    {
        return $this->hasOne(Comment::className(), ['offerID' => 'ID'])
            ->andWhere(['{{%comment}}.userToID' => $user])
            ->andWhere('{{%comment}}.refuseID IS NULL');
    }

    /**
     * @return int
     */
    public function getID()
    {
        return $this->ID;
    }

    /**
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->created_at;
    }

    /**
     * @param $createdAt
     * @return $this
     */
    public function setCreatedAt($createdAt)
    {
        $this->created_at = $createdAt;
        return $this;
    }

    /**
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->updated_at;
    }

    /**
     * @param $updatedAt
     * @return Offer
     */
    public function setUpdatedAt($updatedAt)
    {
        $this->updated_at = $updatedAt;
        return $this;
    }

    /**
     * @return string
     */
    public function getAccepted()
    {
        return $this->accepted;
    }

    /**
     * @param $accepted
     * @return Offer
     */
    public function setAccepted($accepted)
    {
        $this->accepted = $accepted;
        return $this;
    }

    /**
     * @return string
     */
    public function getPrice()
    {
        return $this->price;
    }

    /**
     * @param $price
     * @return Offer
     */
    public function setPrice($price)
    {
        $this->price = $price;
        return $this;
    }

    /**
     * @return int
     */
    public function getPaid()
    {
        return $this->paid;
    }

    /**
     * @param $paid
     * @return Offer
     */
    public function setPaid($paid)
    {
        $this->paid = $paid;
        return $this;
    }
}
