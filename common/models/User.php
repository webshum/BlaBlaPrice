<?php

namespace common\models;

use common\components\behaviors\ImageBehavior;
use Yii;
use yii\base\NotSupportedException;
use yii\behaviors\TimestampBehavior;
use yii\db\ActiveRecord;
use yii\web\IdentityInterface;
use frontend\models\UserFilter;


/**
 * User model class for table "{{%user}}".
 *
 * @property integer $ID
 * @property string|null $created_at
 * @property string|null $updated_at
 * @property string $username
 * @property string $email
 * @property string|null $email_sent
 * @property string|null $email_approved
 * @property string $phone
 * @property string|null $phone_sent
 * @property string|null $phone_approved
 * @property string|null $image
 * @property integer|null $region_id
 * @property string|null $address
 * @property integer $status
 * @property integer $role
 * @property string $authKey
 * @property string $passwordHash
 * @property string $passwordResetToken
 * @property integer|null $priceDown
 * @property integer|null $addressBookID
 * @property string|null $smsCode
 * @property string|null $emailCode
 *
 *
 * @property string $password write-only password
 *
 * @property Category[] $category
 * @property Order[] $order
 * @property Offer[] $offer
 * @property Offer[] $acceptedOffer
 * @property Offer[] $userAcceptedOffers
 * @property Comment[] $comment
 *
 * @property integer $userRating
 * @property integer $percentRating
 * @property integer $countComment
 * @property integer $countOffers
 * @property integer $countPositive
 * @property integer $countNeutral
 * @property integer $countNegative
 * @property array $userComments
 * @property array $userRefuse
 *
 * @mixin ImageBehavior
 */
class User extends ActiveRecord implements IdentityInterface
{
    const STATUS_DELETED = 0;
    const STATUS_INACTIVE = 1;
    const STATUS_ACTIVE = 10;

    const ROLE_USER = 1;
    const ROLE_SELLER = 2;
    const ROLE_ADMIN = 10;

    public $userRating;
    public $percentRating;
    public $countComment;
    public $countOffers;
    public $countPositive;
    public $countNeutral;
    public $countNegative;

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%user}}';
    }

    public function afterFind()
    {
        parent::afterFind(); // TODO: Change the autogenerated stub
        $this->countOffers = Offer::find()->where(['userID' => $this->ID])->count();
        $this->countComment = Comment::find()->where(['userToID' => $this->ID, 'refuseID' => Null])->count();
        $this->countPositive = Comment::find()->where(['userToID' => $this->ID])->andWhere(['rating' => Comment::RATING_GOOD])->count();
        $this->countNeutral = Comment::find()->where(['userToID' => $this->ID])->andWhere(['rating' => Comment::RATING_NEUTRAL])->count();
        $this->countNegative = Comment::find()->where(['userToID' => $this->ID])->andWhere(['rating' => Comment::RATING_BAD])->count();
        if ($this->countPositive != 0) {
            $this->userRating = round($this->countPositive / ($this->countPositive + $this->countNegative) * 10, 2);
            $this->percentRating = round((($this->countPositive * 100) + ($this->countNeutral * 50)) / ($this->countNeutral + $this->countPositive + $this->countNegative),
                2);
        } else {
            $this->countPositive = 0;
            $this->percentRating = 0;
        }
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::className(),
                'createdAtAttribute' => 'created_at',
                'updatedAtAttribute' => 'updated_at',
                'value' => function () {
                    return date('Y-m-d H:i:s');
                },
            ],
            [
                'class' => ImageBehavior::className(),
                'path' => '/uploads',
                'attribute' => 'image'
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['created_at', 'updated_at'], 'safe'],

            ['username', 'string', 'length' => [4, 255]],
            ['username', 'filter', 'filter' => 'trim'],
            ['username', 'required'],
            [
                'username',
                'unique',
                'targetClass' => User::className(),
                'message' => Yii::t('app', 'Це ім`я вже використовується!')
            ],

            ['email', 'filter', 'filter' => 'trim'],
            ['email', 'required'],
            ['email', 'email'],
            [
                'email',
                'unique',
                'targetClass' => User::className(),
                'message' => Yii::t('app', 'Цей email вже використовується!')
            ],

            ['phone', 'string', 'length' => [6, 45]],
            ['phone', 'filter', 'filter' => 'trim'],
            // ['phone', 'required'],
            ['balance', 'required'],
            [
                'phone',
                'unique',
                'targetClass' => User::className(),
                'message' => Yii::t('app', 'Цей телефон вже використовується!')
            ],

            ['status', 'default', 'value' => self::STATUS_ACTIVE],
            [
                'status',
                'in',
                'range' => [
                    self::STATUS_ACTIVE,
                    self::STATUS_DELETED,
                    self::STATUS_INACTIVE
                ]
            ],

            [
                ['address'],
                function ($attribute, $params) {
                    $this->$attribute = strip_tags($this->$attribute);
                }
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'ID' => Yii::t('app', 'ID'),
            'created_at' => Yii::t('app', 'Created At'),
            'updated_at' => Yii::t('app', 'Updated At'),
            'region_id' => Yii::t('app', 'Region id'),
            'username' => Yii::t('app', 'Username'),
            'email' => Yii::t('app', 'Email'),
            'email_sent' => Yii::t('app', 'Email Sent'),
            'email_approved' => Yii::t('app', 'Email Approved'),
            'phone' => Yii::t('app', 'Phone'),
            'phone_sent' => Yii::t('app', 'Phone Sent'),
            'phone_approved' => Yii::t('app', 'Phone Approved'),
            'image' => Yii::t('app', 'Image'),
            'address' => Yii::t('app', 'Address'),
            'status' => Yii::t('app', 'Status'),
            'role' => Yii::t('app', 'Role'),
            'authKey' => Yii::t('app', 'authKey'),
            'passwordHash' => Yii::t('app', 'passwordHash'),
            'passwordResetToken' => Yii::t('app', 'passwordResetToken'),
            'priceDown' => Yii::t('app', 'priceDown'),
            'addressBookID' => Yii::t('app', 'addressBookID'),
            'smsCode' => Yii::t('app', 'smsCode'),
            'emailCode' => Yii::t('app', 'emailCode')
        ];
    }

    public static function isRole($role)
    {
        $identity = Yii::$app->user->identity;
        return $identity && $identity->role === $role;
    }

    public static function isNotRole($role)
    {
        $identity = Yii::$app->user->identity;
        return !$identity || $identity->role !== $role;
    }

    /**
     * @inheritdoc
     */
    public static function findIdentity($id)
    {
        return static::findOne([
            'id' => $id,
            '(status=' . self::STATUS_ACTIVE . ' OR status=' . self::STATUS_INACTIVE . ')'
        ]);
    }

    /**
     * @inheritdoc
     */
    public static function findIdentityByAccessToken($token, $type = null)
    {
        throw new NotSupportedException('"findIdentityByAccessToken" is not implemented.');
    }

    /**
     * Finds user by username
     *
     * @param string $username
     * @return static|null
     */
    public static function findByUsername($username)
    {
        return static::findOne(['username' => $username, 'status' => self::STATUS_ACTIVE]);
    }

    /**
     * Finds user by email
     *
     * @param string $email
     * @return static|null
     */
    public static function findByEmail($email)
    {
        return static::findOne(['email' => $email, 'status' => self::STATUS_ACTIVE]);
    }

    /**
     * Finds user by password reset token
     *
     * @param string $token password reset token
     * @return static|null
     */
    public static function findByPasswordResetToken($token)
    {
        if (!static::isPasswordResetTokenValid($token)) {
            return null;
        }

        return static::findOne([
            'passwordResetToken' => $token,
            'status' => self::STATUS_ACTIVE,
        ]);
    }

    /**
     * Finds out if password reset token is valid
     *
     * @param string $token password reset token
     * @return boolean
     */
    public static function isPasswordResetTokenValid($token)
    {
        if (empty($token)) {
            return false;
        }

        $timestamp = (int)substr($token, strrpos($token, '_') + 1);
        $expire = Yii::$app->params['user.passwordResetTokenExpire'];
        return $timestamp + $expire >= time();
    }

    /**
     * @inheritdoc
     */
    public function getId()
    {
        return $this->getPrimaryKey();
    }

    /**
     * @return null|string
     */
    public function getCreatedAt()
    {
        return $this->created_at;
    }

    /**
     * @param null|string $created_at
     */
    public function setCreatedAt($created_at)
    {
        $this->created_at = $created_at;
    }

    /**
     * @return null|string
     */
    public function getUpdatedAt()
    {
        return $this->updated_at;
    }

    /**
     * @param null|string $updated_at
     */
    public function setUpdatedAt($updated_at)
    {
        $this->updated_at = $updated_at;
    }

    /**
     * @return string
     */
    public function getUsername()
    {
        return $this->username;
    }

    /**
     * @param string $username
     * @return User
     */
    public function setUsername(string $username)
    {
        $this->username = $username;

        return $this;
    }

    /**
     * @inheritdoc
     */
    public function getAuthKey()
    {
        return $this->authKey;
    }

    /**
     * @inheritdoc
     */
    public function validateAuthKey($authKey)
    {
        return $this->getAuthKey() === $authKey;
    }

    /**
     * Validates password
     *
     * @param string $password password to validate
     * @return boolean if password provided is valid for current user
     */
    public function validatePassword($password)
    {
        $password = trim($password);

        return Yii::$app->security->validatePassword($password, $this->passwordHash);
    }

    /**
     * Generates password hash from password and sets it to the model
     *
     * @param string $password
     */
    public function setPassword($password)
    {
        $this->passwordHash = Yii::$app->security->generatePasswordHash($password);
    }

    /**
     * Generates "remember me" authentication key
     */
    public function generateAuthKey()
    {
        $this->authKey = Yii::$app->security->generateRandomString();
    }

    /**
     * Generates new password reset token
     */
    public function generatePasswordResetToken()
    {
        $this->passwordResetToken = Yii::$app->security->generateRandomString() . '_' . time();
    }

    /**
     * Removes password reset token
     */
    public function removePasswordResetToken()
    {
        $this->passwordResetToken = null;
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUser2category()
    {
        return $this->hasMany(User2category::className(),
            ['userID' => 'ID'])->where(['status' => User2category::STATUS_ACTIVE]);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCategory()
    {
        return $this->hasMany(Category::className(), ['ID' => 'categoryID'])->via('user2category');
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getOrder()
    {
        return $this->hasMany(Order::className(), ['userID' => 'ID'])->where(['status' => Order::STATUS_ACTIVE]);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getAllOrder()
    {
        return $this->hasMany(Order::className(), ['userID' => 'ID']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getOrderSeller()
    {
        if ($this->user2category) {
            return Order::find()->where(['status' => Order::STATUS_ACTIVE])
                ->andWhere(['categoryID' => $this->user2category])
                ->andWhere('(deadLine >= "' . date('Y-m-d H:i:s', time()) . '")')->all();
        } else {
            return Order::find()->where(['status' => Order::STATUS_ACTIVE])
                ->andWhere('(deadLine >= "' . date('Y-m-d H:i:s', time()) . '")')->all();
        }
    }

    public function activeOrderSeller($id)
    {
            $filtersQuery = UserFilter::find()->where(['userID' => $id])->one();

            if (!$filtersQuery) {
                $query = Order::find()
                    ->where('id NOT IN (SELECT orderID FROM complaint_order WHERE sellerId='.$id.')')
                    ->andWhere('id NOT IN (SELECT orderID FROM offer WHERE userId='.$id.')')
                    ->andWhere('status>0')
                    ->andWhere(['>=','deadLine',date("Y-m-d")])
                    ->all();
            } else {
                $filters = json_decode($filtersQuery->filter);
                $region = '';
                $category = '';

                if (!empty($filters) && isset($filters->region)) {
                    foreach ($filters->region as $key => $val) {
                        $region .= $val . ',';
                    }
                }

                $region .= '0';

                if (!empty($filters) && isset($filters->category)) {
                    foreach ($filters->category as $key => $val) {
                        $category .= $val . ',';
                    }
                }

                if (!empty($filters) && isset($filters->third_level_category)) {
                    foreach ($filters->third_level_category as $key => $val) {
                        $category .= $val . ',';
                    }
                }

                if (!empty($filters) && isset($filters->fourth_level_category)) {
                    foreach ($filters->fourth_level_category as $key => $val) {
                        $category .= $val . ',';
                    }
                }

                $region = ($region) ? 'regionID IN (' . trim($region, ',') . ')' : '';
                $category = ($category) ? 'categoryID IN (' . trim($category, ',') . ')' : '';

                $query = Order::find()->where(["and", "priceFrom >= $filters->min_price", "priceFrom <= $filters->max_price"])
                     ->andWhere($region)
                     ->andWhere($category)
                     ->andWhere('id NOT IN (SELECT orderID FROM complaint_order WHERE sellerId='.$id.')')
                     ->andWhere('id NOT IN (SELECT orderID FROM offer WHERE userId='.$id.')')
                     ->andWhere('status>0')
                     ->andWhere(['>=','deadLine',date("Y-m-d")])
                     ->all();

            }

        return count($query);
    }

    public function activeOrderUser()
    {
        return Order::find()->leftJoin('{{%offer}}', '{{%offer}}.orderID = {{%order}}.ID')
            ->where(['{{%order}}.status' => Order::STATUS_ACTIVE])
            ->andWhere(['{{%order}}.userID' => $this->ID])
            ->groupBy('ID')
            ->orderBy('{{%order}}.updated_at DESC');
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getOffer()
    {
        return $this->hasMany(Offer::className(), ['userID' => 'ID'])->orderBy('{{%offer}}.updated_at DESC');
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getAcceptedOffer()
    {
        return $this->hasMany(Offer::className(),
            ['userID' => 'ID'])->where('accepted <> ""')->andWhere('paid IS NULL')->orderBy('{{%offer}}.updated_at DESC');
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getAcceptedPaidOffer()
    {
        return $this->hasMany(Offer::className(),
            ['userID' => 'ID'])->where('accepted <> ""')->andWhere(['paid' => Offer::PAID])->orderBy('{{%offer}}.updated_at DESC');
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getWaitingOffer()
    {
        return $this->hasMany(Offer::className(), ['userID' => 'ID'])
            ->leftJoin('{{%order}}', '{{%offer}}.orderID = {{%order}}.ID')
            ->where('{{%offer}}.accepted IS NULL')
            ->andWhere(['{{%order}}.status' => Order::STATUS_ACTIVE])
            ->orderBy('{{%offer}}.updated_at DESC');
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUserOffers()
    {
        return $this->hasMany(Offer::className(), ['orderID' => 'ID'])->via('order');
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUserAcceptedOffers()
    {
        return $this->hasMany(Offer::className(),
            ['orderID' => 'ID'])->where('accepted <> ""')->via('allOrder')->orderBy('{{%offer}}.updated_at DESC');
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getComment()
    {
        return $this->hasMany(Comment::className(), ['UserToID' => 'ID']);
    }






    /**
     * @param $id integer|null
     *
     * @return \yii\db\ActiveQuery
     */
    public function getUserComments($id = null, $cond = '')
    {
        $role = null;
        $table = '';
        if (!$id) {
            $id = $this->ID;
            $role = $this->role;
        } else {
            $user = self::findOne(['ID' => $id]);
            $role = $user->role;
        }

        if ($role == self::ROLE_SELLER) {
            $table = '{{%offer}}';
        } elseif ($role == self::ROLE_USER) {
            $table = '{{%order}}';
        }

        $result = UserComment::find()->select([
            'comment.ID AS ID',
            'comment.UserFromID AS userFrom',
            'comment.UserToID AS userTo',
            'comment.rating AS commentRating',
            'comment.comment AS commentt',
            'comment.updated_at AS commentUpdated',
            '{{%offer}}.ID AS offerID',
            '{{%order}}.ID AS orderID',
            'category.name AS category',
            'product.name AS product', // ← тут заміна
            '{{%order}}.filter',
            'answer.ID AS answerID',
            'answer.userFromId AS answerUserFromID',
            'user.username AS answerUsername',
            'answer.UserToID AS answerUserToID',
            'answer.rating AS answerRating',
            'answer.comment AS answerComment',
            'answer.updated_at AS answerUpdated',
            'user.phone AS phone',
            'user.email AS email',
        ])
        ->from('{{%offer}}')
        ->leftJoin('{{%order}}', 'offer.orderID = `order`.ID')
        ->leftJoin('{{%product}}', 'product.ID = `order`.productID') // ← новий JOIN
        ->leftJoin('{{%comment}} AS comment',
            'comment.offerID = offer.ID AND comment.UserFromID = :id AND comment.refuseID IS NULL', [':id' => $id])
        ->leftJoin('{{%comment}} AS answer',
            'answer.offerID = offer.ID AND answer.UserToID = :id AND answer.refuseID IS NULL', [':id' => $id])
        ->leftJoin('{{%category}}', '`order`.categoryID = category.ID')
        ->leftJoin('{{%user}}', 'user.ID = answer.userFromID')
        ->where($table . '.userID = :id', [':id' => $id])
        ->andWhere('offer.accepted IS NOT NULL')
        ->andWhere($cond)
        ->distinct();

        if ($role == self::ROLE_SELLER) {
            $result->andWhere('(comment.ID IS NOT NULL OR answer.ID IS NOT NULL)');
        }

        $result->orderBy('commentUpdated DESC');

        return $result;
    }


    /**
     * @param $id integer|null
     *
     * @return \yii\db\ActiveQuery
     */
    public function getUserRefuse($id = null)
    {
        if (!$id) {
            $id = $this->ID;
        }

        return UserComment::find()->select([
                '{{%offer}}.ID AS offerID',
                '{{%offer}}.price AS offerPrice',
                '{{%offer}}.comment AS offerComment',
                '{{%offer}}.updated_at AS offerUpdated',
                '{{%order}}.ID AS orderID',
                '{{%category}}.name AS category',
                'product.name AS product',  // Замість IF + підзапиту
                '{{%order}}.filter',
                'answer.ID AS answerID',
                '{{%user}}.username AS answerUsername',
                'answer.UserToID AS answerUserToID',
                'answer.refuseID AS answerRefuse',
                'answer.comment AS answerComment',
                'answer.updated_at AS answerUpdated',
            ])
            ->from('{{%offer}}')
            ->leftJoin('{{%order}}', 'offer.orderID = {{%order}}.ID')
            ->leftJoin('product', 'product.ID = {{%order}}.productID')  // Ось тут JOIN на product
            ->leftJoin('{{%comment}} AS answer', 'answer.offerID = offer.ID AND answer.UserToID = :id', [':id' => $id])
            ->leftJoin('{{%category}}', '{{%order}}.categoryID = category.ID')
            ->leftJoin('{{%user}}', 'user.ID = answer.userFromID')
            ->where('offer.accepted IS NOT NULL')
            ->andWhere('answer.refuseID IS NOT NULL')
            ->orderBy('answer.updated_at DESC');
    }


    public function getSelectedChildCategory($id)
    {
        $category = Category::findAll(['parentID' => $id]);
        $user_category = User2category::findAll(['userID' => $this->ID, 'status' => User2category::STATUS_ACTIVE]);

        foreach ($category as $category_item) {
            foreach ($user_category as $user_category_item) {
                if ($user_category_item->categoryID == $category_item->ID) {
                    return true;
                }
            }
        }

        return false;
    }

    public function getBill()
    {
        $balance = Payment::findBySql("SELECT sum(`amount`) as amount FROM {{%payment}} where userID=:id",
            ['id' => $this->ID])->one();
        return $balance->amount;
    }

    public function getCommission()
    {
        $sum = Offer::findBySql('SELECT SUM(`price`) as `price` FROM {{%offer}} WHERE (`userID`=:id) AND (`accepted` <> "") AND (`paid` IS NULL)',
            ['id' => $this->ID])->one();
        $sum = $sum->price / Yii::$app->params['commission'];
        return $sum;
    }

    public function getPaidOffers()
    {
        $sum = Offer::findBySql('SELECT SUM(`price`) as `price` FROM {{%offer}} WHERE (`userID`=:id) AND (`accepted` <> "") AND (`paid` = :paid)',
            ['id' => $this->ID, 'paid' => Offer::PAID])->one();
        $sum = $sum->price / Yii::$app->params['commission'];
        return $sum;
    }

    public function getBalance()
    {
        return $this->bill - $this->paidOffers;
    }

    public function getAccess()
    {
        return true;
    }

    /**
     * @return int|null
     */
    public function getRegionID()
    {
        return $this->region_id;
    }

    /**
     * @param int|null $regionID
     */
    public function setRegionID($regionID)
    {
        $this->region_id = $regionID;
    }

    /**
     * @return string
     */
    public function getEmail()
    {
        return $this->email;
    }

    /**
     * @param string $email
     * @return string
     */
    public function setEmail($email)
    {
        $this->email = $email;
        return $this;
    }

    /**
     * @return string|null
     */
    public function getEmailSent()
    {
        return $this->email_sent;
    }

    /**
     * @param string|null $emailSent
     * @return User
     */
    public function setEmailSent($emailSent)
    {
        $this->email_sent = $emailSent;
        return $this;
    }

    /**
     * @return string|null
     */
    public function getEmailApproved()
    {
        return $this->email_approved;
    }

    /**
     * @param string|null $emailApproved
     * @return User
     */
    public function setEmailApproved($emailApproved)
    {
        $this->email_approved = $emailApproved;
        return $this;
    }

    /**
     * @return string|null
     */
    public function getPhone()
    {
        return $this->phone;
    }

    /**
     * @param string|null $phone
     * @return User
     */
    public function setPhone($phone)
    {
        $this->phone = $phone;
        return $this;
    }

    /**
     * @return string|null
     */
    public function getPhoneSent()
    {
        return $this->phone_sent;
    }

    /**
     * @param string|null $phoneSent
     * @return User
     */
    public function setPhoneSent($phoneSent)
    {
        $this->phone_sent = $phoneSent;
        return $this;
    }

    /**
     * @return string|null
     */
    public function getPhoneApproved()
    {
        return $this->phone_approved;
    }

    /**
     * @param string|null $phoneApproved
     * @return User
     */
    public function setPhoneApproved($phoneApproved)
    {
        $this->phone_approved = $phoneApproved;
        return $this;
    }

    /**
     * @return string
     */
    public function getImage()
    {
        return $this->image;
    }

    /**
     * @param string $image
     * @return User
     */
    public function setImage(string $image)
    {
        $this->image = $image;
        return $this;
    }

    /**
     * @return string
     */
    public function getAddress()
    {
        return $this->address;
    }

    /**
     * @param string|null $address
     * @return User
     */
    public function setAddress($address)
    {
        $this->address = $address;
        return $this;
    }

    /**
     * @return integer
     */
    public function getStatus()
    {
        $this->status;
    }

    /**
     * @param int $status
     * @return User
     */
    public function setStatus(int $status)
    {
        $this->status = $status;
        return $this;
    }

    /**
     * @return int
     */
    public function getRole()
    {
        return $this->role;
    }

    /**
     * @param $role
     * @return User
     */
    public function setRole($role)
    {
        $this->role = $role;

        return $this;
    }

    /**
     * @return integer
     */
    public function getAddressBookId()
    {
        return $this->addressBookID;
    }

    /**
     * @param integer $addressBookId
     * @return User
     */
    public function setAddressBookId(int $addressBookId)
    {
        $this->addressBookID = $addressBookId;
        return $this;
    }

    /**
     * @return string|null
     */
    public function getSmsCode()
    {
        return $this->smsCode;
    }

    /**
     * @param string|null $smsCode
     * @return User
     */
    public function setSmsCode($smsCode)
    {
        $this->smsCode = $smsCode;
        return $this;
    }


    /**
     * @return string
     */
    public function getEmailCode()
    {
        return $this->emailCode;
    }

    /**
     * @param string $emailCode
     * @return User
     */
    public function setEmailCode(string $emailCode)
    {
        $this->emailCode = $emailCode;
        return $this;
    }
}
