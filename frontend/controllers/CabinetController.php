<?php

namespace frontend\controllers;

use common\models\Comment;
use common\models\Notification;
use common\models\Order;
use common\models\Offer;
use common\models\User;
use common\models\Category;
use common\models\User2category;
use common\models\LiqPay;
use common\models\Payment;
use frontend\models\ComplaintOrder;
use frontend\models\ChangePassword;
use frontend\models\SignupForm;
use frontend\models\UserFilter;
use Yii;
use yii\data\Pagination;
use yii\filters\AccessControl;
use yii\filters\VerbFilter;
use yii\helpers\Html;
use yii\helpers\Url;
use yii\web\UploadedFile;
use yii\web\Response;
use yii\web\Session;


/**
 * Users cabinet controller
 *
 * Class CabinetController
 * @package frontend\controllers
 *
 * @property  User $user
 */
class CabinetController extends MenuController
{
    /**
     * @var User
     */
    public $user;
    public $orderCount;

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                'rules' => [
                    [
                        'actions' => [
                            'accepted',
							'accepted-with-ans',
							'accepted-without-ans',
							'accepted-refuse',
                            'accepted-offer',
                            'comment',
							'comment-with-ans',
							'comment-without-ans',
							'comment-refuse',
                            'change-email',
                            'filter',
                            'load-user-comment',
                            'load-user-refuse',
                            'offer',
                            'order',
                            'order-disable',
                            'settings',
                            'settings-update',
                            'settings-update-email',
                            'settings-update-phone',
                            'set-category',
                            'pay',
                            'change-phone',
                            'check-sms',
                            'change-password',
                            'send-confirm-email',
                            'payment',
                            'callback'
                        ],
                        'allow' => true,
                        'roles' => ['@']
                    ],
                    [
                        'actions' => ['callback', 'payment'],
                        'allow' => true,
                        'roles' => ['?'], 
                    ]
                ],
            ],
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'logout' => ['post'],
                ],
            ],
        ];
    }

    public function beforeAction($action)
    {
        $this->enableCsrfValidation = false;
        return parent::beforeAction($action);
    }

    /**
     * @inheritdoc
     */
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->user = User::findOne(['ID' => Yii::$app->user->id]);
    }


    /**
     * Seller offer accepted page
     *
     * @return mixed
     */
    public function actionAcceptedRefuse($page=1)
    {
        if ($this->user->role == User::ROLE_USER) {
            $comment = new Comment();

            if (Yii::$app->request->post()) {
                $offer = Offer::findOne(['ID' => Yii::$app->request->post('Comment')['offerID']]);

                if (isset(Yii::$app->request->post('Comment')['refuseID'])) {
                    $offer->status = Offer::STATUS_REJECTED;
                    $offer->order->status = Order::STATUS_ACTIVE;
                    $offer->order->save();
                } else {
                    $offer->status = Offer::STATUS_ACCEPTED;
                }

                $offer->save();

                if (isset(Yii::$app->request->post('Comment')['ID'])) {
                    Comment::deleteAll(['ID' => Yii::$app->request->post('Comment')['ID']]);
                }

                $comment->load(Yii::$app->request->post());
                $comment->save();

                return $this->redirect(['cabinet/accepted']);
            }

               $offer = Offer::find()
                 ->where('`orderID` IN (SELECT `id` FROM `order` WHERE `userID`='.Yii::$app->user->id.')')
                 ->andWhere('`accepted` IS NOT NULL')
				 ->andWhere('`status`=2')
                 ->orderBy('`updated_at` DESC');

                $countQuery = clone $offer;
                $countOffer = $countQuery->count();

                $pages = new Pagination(['totalCount' => $countOffer]);
                $pages->defaultPageSize = Yii::$app->params['countPage'];

				$models = $offer->offset($pages->offset)
                ->limit($pages->limit)
                ->all();
            return $this->render('user-accepted-refuse', ['user' => $this->user, 'comment' => $comment, 'pages' => $pages, 'offer' => $models]);

        }

    }

    /**
     * Seller offer accepted page
     *
     * @return mixed
     */
    public function actionAcceptedWithoutAns($page=1)
	{
        if ($this->user->role == User::ROLE_USER) {
            $comment = new Comment();

            if (Yii::$app->request->post()) {
                $offer = Offer::findOne(['ID' => Yii::$app->request->post('Comment')['offerID']]);

                if (isset(Yii::$app->request->post('Comment')['refuseID'])) {
                    $offer->status = Offer::STATUS_REJECTED;
                    $offer->order->status = Order::STATUS_ACTIVE;
                    $offer->order->save();
                } else {
                    $offer->status = Offer::STATUS_ACCEPTED;
                }

                $offer->save();

                if (isset(Yii::$app->request->post('Comment')['ID'])) {
                    Comment::deleteAll(['ID' => Yii::$app->request->post('Comment')['ID']]);
                }

                $comment->load(Yii::$app->request->post());
                $comment->save();

                return $this->redirect(['cabinet/accepted-without-ans']);
            }

               $offer = Offer::find()
                 ->where('`orderID` IN (SELECT `id` FROM `order` WHERE `userID`='.Yii::$app->user->id.')')
                 ->andWhere('`accepted` IS NOT NULL')
				 ->andWhere('`status` IS NULL')
                 ->orderBy('`updated_at` DESC');

                $countQuery = clone $offer;
                $countOffer = $countQuery->count();

                $pages = new Pagination(['totalCount' => $countOffer]);
                $pages->defaultPageSize = Yii::$app->params['countPage'];


            $models = $offer->offset($pages->offset)
                ->limit($pages->limit)
                ->all();
            return $this->render('user-accepted-without-ans', ['user' => $this->user, 'comment' => $comment, 'pages' => $pages, 'offer' => $models]);

        }

    }

    /**
     * Seller offer accepted page
     *
     * @return mixed
     */
    public function actionAcceptedWithAns($page=1)
    {
        if ($this->user->role == User::ROLE_USER) {
            $comment = new Comment();

            if (Yii::$app->request->post()) {
                $offer = Offer::findOne(['ID' => Yii::$app->request->post('Comment')['offerID']]);

                if (isset(Yii::$app->request->post('Comment')['refuseID'])) {
                    $offer->status = Offer::STATUS_REJECTED;
                    $offer->order->status = Order::STATUS_ACTIVE;
                    $offer->order->save();
                } else {
                    $offer->status = Offer::STATUS_ACCEPTED;
                }

                $offer->save();

                if (isset(Yii::$app->request->post('Comment')['ID'])) {
                    Comment::deleteAll(['ID' => Yii::$app->request->post('Comment')['ID']]);
                }

                $comment->load(Yii::$app->request->post());
                $comment->save();

                return $this->redirect(['cabinet/accepted-with-ans']);
            }

            $offer = Offer::find()
             ->where('`orderID` IN (SELECT `id` FROM `order` WHERE `userID`='.Yii::$app->user->id.')')
             ->andWhere('`accepted` IS NOT NULL')
			 ->andWhere('`status`=1')
             ->orderBy('`updated_at` DESC');

            $countQuery = clone $offer;
            $countOffer = $countQuery->count();

            $pages = new Pagination(['totalCount' => $countOffer]);
            $pages->defaultPageSize = Yii::$app->params['countPage'];

            $models = $offer->offset($pages->offset)
                ->limit($pages->limit)
                ->all();

            return $this->render('user-accepted-with-ans', [
                'user' => $this->user, 
                'comment' => $comment, 
                'pages' => $pages, 
                'offer' => $models
            ]);
        }
    }

    /**
     * Seller offer accepted page
     *
     * @return mixed
     */
    public function actionAccepted($page=1)
    {
        if ($this->user->role == User::ROLE_USER) {
            $comment = new Comment();

            if (Yii::$app->request->post()) {
                $offer = Offer::findOne(['ID' => Yii::$app->request->post('Comment')['offerID']]);

                if (isset(Yii::$app->request->post('Comment')['refuseID'])) {
                    $offer->status = Offer::STATUS_REJECTED;
                    $offer->order->status = Order::STATUS_ACTIVE;
                    $offer->order->save();
                } else {
                    $offer->status = Offer::STATUS_ACCEPTED;
                }

                $offer->save();

                if (isset(Yii::$app->request->post('Comment')['ID'])) {
                    Comment::deleteAll(['ID' => Yii::$app->request->post('Comment')['ID']]);
                }

                $comment->load(Yii::$app->request->post());
                $comment->save();

                return $this->redirect(['cabinet/accepted']);
            }

           $offer = Offer::find()
             ->where('`orderID` IN (SELECT `id` FROM `order` WHERE `userID`='.Yii::$app->user->id.')')
             ->andWhere('`accepted` IS NOT NULL')
             ->orderBy('`updated_at` DESC');

            $countQuery = clone $offer;
            $countOffer = $countQuery->count();

            $pages = new Pagination(['totalCount' => $countOffer]);
            $pages->defaultPageSize = Yii::$app->params['countPage'];


            $models = $offer->offset($pages->offset)
                ->limit($pages->limit)
                ->all();
            return $this->render('user-accepted', ['user' => $this->user, 'comment' => $comment, 'pages' => $pages, 'offer' => $models]);

        }

        if ($this->user->role == User::ROLE_SELLER) {
			$comment = new Comment();

			if (Yii::$app->request->isPost) {
				$commentId = Yii::$app->request->post('Comment')['ID'];
				if (isset($commentId) && $commentId != '' && !is_null($commentId)) {
					$comment = Comment::findOne(['ID' => $commentId]);
				}

				$comment->load(Yii::$app->request->post());
				$comment->save();

				return $this->redirect(['cabinet/accepted']);
			}

            $offerIDs = Comment::find()
                ->where(['userFromID' => Yii::$app->user->id])
                ->select('offerID');

            $offer = Offer::find()
                ->where('userID=' . Yii::$app->user->id)
                ->andWhere('accepted IS NOT NULL')
                ->andWhere([
                    'or',
                    ['is', 'status', null],  
                    ['!=', 'status', 2]     
                ])
                ->andWhere('paid IS NOT NULL')
                ->andWhere(['NOT IN', 'ID', $offerIDs])
                ->orderBy('updated_at DESC');

            $countQuery = clone $offer;
            $countOffer = $countQuery->count();

            $pages = new Pagination(['totalCount' => $countOffer]);
            $pages->defaultPageSize = Yii::$app->params['countPage'];

            $models = $offer->offset($pages->offset)
                ->limit($pages->limit)
                ->all();

            return $this->render('seller-accepted', [
                'user' => $this->user, 
                'pages' => $pages, 
                'offer' => $models
            ]);
        }
    }

    /**
     * Save accepted offer by user and set status for Order to disabled
     *
     * @return Response
     */
    public function actionAcceptedOffer()
    {
        $post = Yii::$app->request->post();
        $offer = Offer::findOne(['ID' => $post['id']]);

        if (!is_null($offer) && !$offer->getAccepted()) {
            $str = '/kata/' .  $offer->categoryID . '/';
            $category = Category::findOne(['seolink' => $str]);

            $user = User::findOne(['ID' => $offer->userID]);
            $user->bal = (int)$user->bal - 1;
            $user->save(false);

            $offer->order->setStatus(Order::STATUS_DISABLE);
            $offer->order->save();
            $offer->setAccepted(date('Y-m-d H:i:s', time()));
            $offer->setPaid(Offer::PAID);
            $offer->save();
        }

        return $this->redirect(['cabinet/accepted-without-ans']);
    }
	
	 /**
     * User comments page
     *
     * @return mixed
     */
    public function actionCommentRefuse()
    {
        // $comment = new Comment();

        // if (Yii::$app->request->isPost) {
            // $commentId = Yii::$app->request->post('Comment')['ID'];
            // if (isset($commentId) && $commentId != '' && !is_null($commentId)) {
                // $comment = Comment::findOne(['ID' => $commentId]);
            // }

            // $comment->load(Yii::$app->request->post());
            // $comment->save();

            // return $this->redirect(['cabinet/comment']);
        // }

        // $query = $this->user->getUserComments(null,'comment.ID IS NOT NULL');
        // $pages = new Pagination(['totalCount' => $query->count()]);
        // $pages->defaultPageSize = Yii::$app->params['countPage'];
        // $pages->defaultPageSize = 5;
        // $models = $query->offset($pages->offset)
        // ->limit($pages->limit)
        // ->all();

        // if ($this->user->role == User::ROLE_USER) {
            // return $this->render('user-comment', [
                // 'user' => $this->user,
                // 'models' => $models,
                // 'pages' => $pages,
                // 'comment' => $comment
            // ]);
        // }

        if ($this->user->role == User::ROLE_SELLER) {
            $query = $this->user->getUserRefuse();
            $pages_refuses = new Pagination(['totalCount' => $query->count()]);
            //$pages->defaultPageSize = Yii::$app->params['countPage'];
            $pages_refuses->defaultPageSize = 5;
            $refuses = $query->offset($pages_refuses->offset)
                ->limit($pages_refuses->defaultPageSize)//$pages_refuses->limit)
                ->all();

            return $this->render('seller-comment-refuse', [
                'user' => $this->user,
                // 'models' => $models,
                 'refuses' => $refuses,
                 //'pages' => $pages,
                 'pages_refuses' => $pages_refuses,
                // 'comment' => $comment
            ]);
        }
    }

	 /**
     * User comments page
     *
     * @return mixed
     */
    public function actionCommentWithAns()
    {
        $comment = new Comment();

        if (Yii::$app->request->isPost) {
            $commentId = Yii::$app->request->post('Comment')['ID'];
            if (isset($commentId) && $commentId != '' && !is_null($commentId)) {
                $comment = Comment::findOne(['ID' => $commentId]);
            }

            $comment->load(Yii::$app->request->post());
            $comment->save();

            return $this->redirect(['cabinet/comment-with-ans']);
        }

        $query = $this->user->getUserComments(null,'comment.ID IS NOT NULL');
        $pages = new Pagination(['totalCount' => $query->count()]);
        $pages->defaultPageSize = Yii::$app->params['countPage'];
        $pages->defaultPageSize = 5;
        $models = $query->offset($pages->offset)
        ->limit($pages->defaultPageSize)//$pages->limit)
        ->all();

        // if ($this->user->role == User::ROLE_USER) {
            // return $this->render('user-comment', [
                // 'user' => $this->user,
                // 'models' => $models,
                // 'pages' => $pages,
                // 'comment' => $comment
            // ]);
        // }

        if ($this->user->role == User::ROLE_SELLER) {
            $query = $this->user->getUserRefuse();
            $pages_refuses = new Pagination(['totalCount' => $query->count()]);
            //$pages->defaultPageSize = Yii::$app->params['countPage'];
            $pages->defaultPageSize = 5;
            $refuses = $query->offset($pages_refuses->offset)
                ->limit($pages_refuses->limit)
                ->all();

            return $this->render('seller-comment-with-ans', [
                'user' => $this->user,
                'models' => $models,
                // 'refuses' => $refuses,
                'pages' => $pages,
                // 'pages_refuses' => $pages_refuses,
                // 'comment' => $comment
            ]);
        }
    }

	 /**
     * User comments page
     *
     * @return mixed
     */
    public function actionCommentWithoutAns()
    {
        // $comment = new Comment();

        // if (Yii::$app->request->isPost) {
            // $commentId = Yii::$app->request->post('Comment')['ID'];
            // if (isset($commentId) && $commentId != '' && !is_null($commentId)) {
                // $comment = Comment::findOne(['ID' => $commentId]);
            // }

            // $comment->load(Yii::$app->request->post());
            // $comment->save();

            // return $this->redirect(['cabinet/comment-with-ans']);
        // }

        $query = $this->user->getUserComments(null,'comment.ID IS NULL');
        $pages = new Pagination(['totalCount' => $query->count()]);
        $pages->defaultPageSize = Yii::$app->params['countPage'];
        $pages->defaultPageSize = 5;
        $models = $query->offset($pages->offset)
        ->limit($pages->limit)
        ->all();

        // if ($this->user->role == User::ROLE_USER) {
            // return $this->render('user-comment', [
                // 'user' => $this->user,
                // 'models' => $models,
                // 'pages' => $pages,
                // 'comment' => $comment
            // ]);
        // }

        if ($this->user->role == User::ROLE_SELLER) {
            $query = $this->user->getUserRefuse();
            $pages_refuses = new Pagination(['totalCount' => $query->count()]);
            //$pages->defaultPageSize = Yii::$app->params['countPage'];
            $pages->defaultPageSize = 5;
            $refuses = $query->offset($pages_refuses->offset)
                ->limit($pages->defaultPageSize)
                ->all();

            return $this->render('seller-comment-without-ans', [
                'user' => $this->user,
                'models' => $models,
                // 'refuses' => $refuses,
                'pages' => $pages,
                // 'pages_refuses' => $pages_refuses,
                // 'comment' => $comment
            ]);
        }
    }

    /**
     * User comments page
     *
     * @return mixed
     */
    public function actionComment()
    {
        $comment = new Comment();
        
        if (Yii::$app->request->isPost) {
            $commentId = Yii::$app->request->post('Comment')['ID'];
            if (isset($commentId) && $commentId != '' && !is_null($commentId)) {
                $comment = Comment::findOne(['ID' => $commentId]);
            }

            $comment->load(Yii::$app->request->post());
            $comment->save();

            return $this->redirect(['cabinet/comment']);
        }
        
        $query = $this->user->getUserComments(null,'answer.ID IS NOT NULL');
        $pages = new Pagination(['totalCount' => $query->count()]);
        $pages->defaultPageSize = Yii::$app->params['countPage'];
        $models = $query->offset($pages->offset)
            ->limit($pages->limit)
            ->all();

        if ($this->user->role == User::ROLE_USER) {
            return $this->render('user-comment', [
                'user' => $this->user,
                'models' => $models,
                'pages' => $pages,
                'comment' => $comment
            ]);
        }

        if ($this->user->role == User::ROLE_SELLER) {
            $query = $this->user->getUserRefuse();
            $pages_refuses = new Pagination(['totalCount' => $query->count()]);
            $pages->defaultPageSize = Yii::$app->params['countPage'];
            $pages->defaultPageSize = 5;
            
            $refuses = $query->offset($pages_refuses->offset)
                ->limit($pages_refuses->limit)
                ->all();          

            return $this->render('seller-comment', [
                'user' => $this->user,
                'models' => $models,
                'refuses' => $refuses,
                'pages' => $pages,
                'pages_refuses' => $pages_refuses,
                'comment' => $comment
            ]);
        }
    }

    /**
     * Change user email by ajax
     */
    public function actionChangeEmail()
    {
        $response = [
            'result' => false,
            'message' => Yii::t('app', 'Error')
        ];

        if (Yii::$app->request->isAjax) {
            $newUserEmail = Yii::$app->request->post('User')['email'] ?? '';

            if (!empty($newUserEmail)/** && $this->user->getEmail() !== $newUserEmail */) {
                $this->user->setEmail($newUserEmail);

                if ($this->user->validate() && $this->user->save()) {
                    // send new email for confirmation
                    $emailCode = Yii::$app->security->generateRandomString(6);
                    $this->user->setEmailCode($emailCode);

                    $this->sendConfirmationEmail($emailCode);
                    $sendEmailResult = true;

                    $this->user->setEmailSent(date('Y-m-d H:i:s'));
                   /** $this->user->setEmailApproved(null);*/
                    $this->user->save();


                    $response = [
                        'result' => true,
                        'emailSent' => $sendEmailResult,
                        'message' => Yii::t('app', 'E-mail успішно оновлено')
                    ];
                } elseif ($this->user->hasErrors()) {
                    $response = [
                        'result' => false,
                        'message' => Yii::t('app', 'Не вдалось оновити e-mail'),
                        'errors' => []
                    ];

                    foreach ($this->user->getErrors() as $errorName => $error) {
                        array_push($response['errors'], [
                            $errorName => $error['0']
                        ]);
                    }
                }
            } else {
                $response = [
                    'result' => false,
                    'message' => Yii::t('app', 'Ви ввели поточний email')
                ];
            }
        } else {
            $response = [
                'result' => false,
                'message' => Yii::t('app', 'Not Ajax request')
            ];
        }

        Yii::$app->response->format = Response::FORMAT_JSON;
        return $response;
    }

    /**
     * Sellers filter settings page
     *
     * @return mixed
     */
    public function actionFilter()
    {
        if ($this->user->role == User::ROLE_SELLER) {

            $userCategories = $this->user->getCategory()->asArray()->all();
            $userCategoriesIds = [];

            $filters = UserFilter::find()->where(['userID' => Yii::$app->user->id])->one();
            
            return $this->render('seller-filter', [
                'user' => $this->user,
                'userCategoriesIds' => $userCategoriesIds,
                'filters' => $filters->filter,
            ]);
        }
    }

    /**
     * Get user comments starting from set page
     *
     * @param $page
     * @return string
     */
    public function actionLoadUserComment($page)
    {
        $this->layout = null;
        $comment = new Comment();

        $query = $this->user->getUserComments();
        $pages = new Pagination(['totalCount' => $query->count()]);
        //$pages->defaultPageSize = Yii::$app->params['countPage'];
        $pages->defaultPageSize = 1;
        $models = $query->offset($page)
            ->limit($pages->limit)
            ->all();

        return $this->renderPartial('load-user-comment',
            ['user' => $this->user, 'models' => $models, 'pages' => $pages, 'comment' => $comment]);
    }

    /**
     * Get user refuses starting from set page
     *
     * @param $page
     * @return string
     */
    public function actionLoadUserRefuse($page)
    {
        $this->layout = null;

        $query = $this->user->getUserRefuse();
        $pagesRefuses = new Pagination(['totalCount' => $query->count()]);
        //$pages->defaultPageSize = Yii::$app->params['countPage'];
        $pagesRefuses->defaultPageSize = 1;
        $refuses = $query->offset($page)
            ->limit($pagesRefuses->limit)
            ->all();

        return $this->renderPartial('load-seller-refuse', [
            'user' => $this->user,
            'refuses' => $refuses,
            'pages_refuses' => $pagesRefuses,
            'comment' => new Comment()
        ]);
    }

    /**
     * Seller offers page
     *
     * @return mixed
     */
    public function actionOffer()
    {
        if ($this->user->role == User::ROLE_SELLER) {
            if (Yii::$app->request->isPost) {
                $post = Yii::$app->request->post();
                $offer = Offer::findOne(['ID' => $post['Offer']['ID']]);

                if ($offer->load($post)) {
					if (isset($post['images'])) {
						$img = array($post['Offer']['images']);
						$offer->image = json_encode($post['images']);
					}

                    if ($offer->validate(false) && $offer->save(false)) {
                        if ($offer->notification) {
                            Notification::deleteAll(['ID' => $offer->notification->ID]);
                        }
                        return $this->redirect(['cabinet/offer']);
                    } else {
                        Yii::$app->session->setFlash('error', Yii::t('app', 'Вибачте, щось пішло не так. Зверніться будь-ласка у службу підтримки , і опишіть ситуацію. Дякуємо за розуміння'));
                        return $this->redirect(['cabinet/offer']);
                    }
                }
            }

            $query = $this->user->getWaitingOffer();
            $pages = new Pagination(['totalCount' => $query->count()]);
            $pages->defaultPageSize = Yii::$app->params['countPage'];
            $models = $query->offset($pages->offset)
                ->limit($pages->limit)
                ->all();

            return $this->render('seller-offer', [
                'user' => $this->user,
                'models' => $models,
                'pages' => $pages
            ]);
        }
    }

    /**
     * Users order page
     *
     * @return mixed
     */
    public function actionOrder()
    {
        if ($this->user->role == User::ROLE_USER) {
            $free_user = User::find()
                ->leftJoin('{{%user2category}}', '{{%user}}.ID = {{%user2category}}.userID')
                ->where('{{%user2category}}.userID IS NULL')
                ->andWhere(['{{%user}}.role' => User::ROLE_SELLER])
                ->count();

            $query = $this->user->activeOrderUser();
            $pages = new Pagination(['totalCount' => $query->count()]);
            $pages->defaultPageSize = Yii::$app->params['countPage'];

            $models = $query->offset($pages->offset)
                ->limit($pages->limit)
                ->all();

            $this->view->title = Yii::t('app', 'Мої товари');

            return $this->render('user-order', [
                'models' => $models,
                'pages' => $pages,
                'free_user' => $free_user
            ]);
        }

        if ($this->user->role == User::ROLE_SELLER) {
            $offer = new Offer();
            $comment = new Comment();
            $session = Yii::$app->session;

            if ($_FILES['offerImage']) {
                $offer->offerImage = $_FILES['offerImage'];
                $offer->upload();
                unset($_FILES['offerImage']);
                exit;
            } else if (Yii::$app->request->isPost) {
                if ($offer->load(Yii::$app->request->post())) {
                    $post = Yii::$app->request->post();
                    $offer->image = json_encode($post['images']);

                    if ($offer->validate(false) && $offer->save(false)) {

                        Yii::$app->mailer->compose()
                            ->setFrom(Yii::$app->params['adminEmail'])
                            ->setTo($post['Offer']['orderUserEmail'])
                            ->setSubject(Yii::t('app', 'Нова пропозиція'))
                            ->setHtmlBody(Yii::t('app', 'Ви отримали нову пропозицію'))
                            ->send();

                        return $this->redirect(['cabinet/order']);
                    } else {
                        Yii::$app->session->setFlash('error', Yii::t('app', 'Трапилась помилка.'));
                        return $this->redirect(['cabinet/order']);
                    }
                }

                if ($comment->load(Yii::$app->request->post()) && $comment->save()) {
                    $post = Yii::$app->request->post();
                    $order = Order::findOne(['ID' => $post['Comment']['orderID']]);
                    $order->refuseID = $post['Comment']['refuseID'];
                    $order->save();

                    $complaintOrder = new ComplaintOrder();
                    $complaintOrder->userID = $order->userID;
                    $complaintOrder->sellerID = Yii::$app->user->id;
                    $complaintOrder->orderID = $order->ID;
                    //$complaintOrder->deadLine = $order->deadLine;
                    $complaintOrder->save();

                    return $this->redirect(['cabinet/order']);
                } else {
                    Yii::$app->session->setFlash('error', Yii::t('app', 'Трапилась помилка.'));
                    return $this->redirect(['cabinet/order']);
                }
            }

            $filtersQuery = UserFilter::find()->where(['userID' => Yii::$app->user->id])->one();
            $filters = json_decode($filtersQuery->filter);

            if (!$filtersQuery) {
                $query = Order::find()
                    ->where('id NOT IN (SELECT orderID FROM complaint_order WHERE sellerId='.Yii::$app->user->id.')')
                    ->andWhere('id NOT IN (SELECT orderID FROM offer WHERE userId='.Yii::$app->user->id.')')
                    // ->andWhere(['>=','deadLine',date("Y-m-d")])
                    ->andWhere('status>0')
                    ->orderBy('created_at DESC');
                
                $orders = $query->offset($pages->offset)->limit($pages->limit)->all();

                $countQuery = clone $query;
                $countOrder = $countQuery->count();
                $pages = new Pagination(['totalCount' => $countOrder]);
                $pages->defaultPageSize = Yii::$app->params['countPage'];

                $pages = new Pagination(['totalCount' => $countOrder]);
                $pages->defaultPageSize = Yii::$app->params['countPage'];
                $orders = $query->offset($pages->offset)
                    ->limit($pages->limit)
                    ->all();

            } else {
                $region = '';
                $primary_categoryID = '';
                $parent_category = '';
                $category = '';

                if (!empty($filters->region) && count($filters->region)) {
                    foreach ($filters->region as $key => $val) {
                        $region .= $val . ',';
                    }
                }

                if (!empty($filters->primary_categoryID)) {
                    foreach ($filters->primary_categoryID as $key => $val) {
                        $primary_categoryID .= $val . ',';
                    }
                }

                if (!empty($filters->parent_category)) {
                    foreach ($filters->parent_category as $key => $val) {
                        $parent_category .= $val . ',';
                    }
                }

                if (!empty($filters->category)) {
                    foreach ($filters->category as $key => $val) {
                        $category .= $val . ',';
                    }
                }

                if (!empty($filters->third_level_category)) {
                    foreach ($filters->third_level_category as $key => $val) {
                        $category .= $val . ',';
                    }
                }

                if (!empty($filters->fourth_level_category)) {
                    foreach ($filters->fourth_level_category as $key => $val) {
                        $category .= $val . ',';
                    }
                }

                $region = ($region) ? 'regionID IN (' . trim($region, ',') . ')' : '';
                $primary_categoryID = ($primary_categoryID) ? 'primary_categoryID IN (' . trim($primary_categoryID, ',') . ')' : '';
                $parent_category = ($parent_category) ? 'parentID IN (' . trim($parent_category, ',') . ')' : '';
                $category = ($category) ? 'categoryID IN (' . trim($category, ',') . ')' : '';

                $where = [
                    'and',
                    ['between', 'priceFrom', $filters->min_price, $filters->max_price],
                    ['not in', 'id', (new \yii\db\Query())->select('orderID')->from('complaint_order')->where(['sellerId' => Yii::$app->user->id])],
                    ['not in', 'id', (new \yii\db\Query())->select('orderID')->from('offer')->where(['userId' => Yii::$app->user->id])],
                    ['>', 'status', 0],
                ];
                
                $query = Order::find()->where([
                    "and",
                    ["between", "priceFrom", $filters->min_price, $filters->max_price],
                    $region,
                    ["or", $primary_categoryID, $parent_category, $category],
                    ['not in', 'id', (new \yii\db\Query())->select('orderID')->from('complaint_order')->where(['sellerId' => Yii::$app->user->id])],
                    ['not in', 'id', (new \yii\db\Query())->select('orderID')->from('offer')->where(['userId' => Yii::$app->user->id])],
                    ['>', 'status', 0],
                    // ['>=', 'deadLine', date("Y-m-d")]
                ])->orderBy('created_at DESC');

                $countQuery = clone $query;
                $countOrder = $countQuery->count();

                $pages = new Pagination(['totalCount' => $countOrder]);
                $pages->defaultPageSize = Yii::$app->params['countPage'];
                $orders = $query->offset($pages->offset)
                    ->limit($pages->limit)
                    ->all();
            }

            $this->view->title = Yii::t('app', 'Отримані запити');
            $this->orderCount = $countOrder;

            return $this->render('seller-order', [
                'user' => $this->user,
                'orders' => $orders,
                'pages' => $pages,
                'offer' => $offer,
                'countOrders' => $countOrder,
                'filters' => $filters
            ]);
        }
    }

    /**
     * Disable Users order
     *
     * @param null|integer $id
     * @return mixed
     */
    public function actionOrderDisable($id = null)
    {
        if (!is_null($id)) {
            $order = Order::findOne(['ID' => $id]);
            $order->setStatus(Order::STATUS_DISABLE);
            $order->save();
        }

        return $this->redirect(['cabinet/order']);
    }

    /**
     * Display user information & settings page
     *
     * @return mixed
     */
    public function actionSettings()
    {
        $this->view->title = Yii::t('app', 'Персональні дані');
        $template = 'user-settings';

        if ($this->user->role == User::ROLE_SELLER) {
            $this->view->title = Yii::t('app', 'Дані про компанію');
            $template = 'seller-settings';
        }

        return $this->render($template, [
            'user' => $this->user
        ]);
    }

    /**
     * Seller offers accepted page
     */
    public function actionSettingsUpdate()
    {
        $response = [
            'result' => false,
            'message' => Yii::t('app', 'Error')
        ];

        if (Yii::$app->request->isAjax) {
            $this->user->setUsername(strip_tags(Yii::$app->request->post('User')['username'] ?? ''));
            $this->user->setAddress(strip_tags(Yii::$app->request->post('User')['address']));
            $this->user->setRegionID(Yii::$app->request->post('User')['region_id']);
            
            if ($this->user->validate() && $this->user->save()) {
                $response = [
                    'result' => true,
                    'message' => Yii::t('app', 'Особисті дані успішно оновлено')
                ];
            } elseif ($this->user->hasErrors()) {
                $response = [
                    'result' => false,
                    'message' => Yii::t('app', 'Не вдалось оновити осбисті дані')
                ];

                $response['errors'] = [];

                foreach ($this->user->getErrors() as $errorName => $error) {
                    array_push($response['errors'], [
                        $errorName => $error['0']
                    ]);
                }
            }
        } else {
            $response = [
                'result' => false,
                'message' => Yii::t('app', 'Not Ajax request')
            ];
        }

        Yii::$app->response->format = Response::FORMAT_JSON;
        return $response;
    }

    /**
     * Seller setting category method
     *
     * @return mixed
     */
    public function actionSetCategory()
    {
        $response = [
            'result' => false,
            'message' => Yii::t('app', 'Помилка!')
        ];

        if (Yii::$app->request->isPost) {

            $id = Yii::$app->request->post('id');
            $checked = Yii::$app->request->post('checked');
            if ($checked == 'true') {
                $cat_list = $this->recursiveSetCategory($id);
                $cat_list[] = $id;
                foreach ($cat_list as $cat_id) {
                    $category = User2category::findOne(['userID' => Yii::$app->user->id, 'categoryID' => $cat_id]);

                    if ($category) {
                        $category->status = User2category::STATUS_ACTIVE;
                        $category->save();
                    } else {
                        $user2category = new User2category();
                        $user2category->userID = Yii::$app->user->id;
                        $user2category->categoryID = $cat_id;
                        $user2category->status = User2category::STATUS_ACTIVE;
                        $user2category->save();
                    }
                }
            } elseif ($checked == 'false') {
                $cat_list_parent = $this->recursiveDisableCategory($id);
                $cat_list_child = $this->recursiveSetCategory($id);
                $cat_list = array_merge($cat_list_parent, $cat_list_child);
                $cat_list[] = $id;

                foreach ($cat_list as $cat_id) {
                    $category = User2category::findOne(['userID' => Yii::$app->user->id, 'categoryID' => $cat_id]);
                    if ($category) {
                        $category->status = User2category::STATUS_DISABLE;
                        $category->save();
                    } else {
                        $user2category = new User2category();
                        $user2category->userID = Yii::$app->user->id;
                        $user2category->categoryID = $cat_id;
                        $user2category->status = User2category::STATUS_ACTIVE;
                        $user2category->save();
                    }
                }
            }

            $response = [
                'result' => true,
                'message' => Yii::t('app', 'Категорії успішно оновлено.')
            ];
        }

        Yii::$app->response->format = Response::FORMAT_JSON;
        return $response;
    }

    /**
     * Pay for each seller accepted offer
     *
     * @return Response
     */
    public function actionPay()
    {

        foreach ($this->user->acceptedOffer as $offer) {
            $offer->setPaid(Offer::PAID);
            $offer->save();
        }

        return $this->redirect(['cabinet/accepted']);
    }

    /**
     * Method for changing user phone
     *
     * @return bool
     */
    public function actionChangePhone()
    {
        $response = [
            'result' => false,
            'message' => Yii::t('app', 'Не вдалось змінити телефон! Можливо телефон вже використовується.'),
            'smsSent' => false
        ];

        if (Yii::$app->request->isAjax) {
            $request = Yii::$app->request;

            $this->user->setPhone($request->getBodyParam('User')['phone'] ?? null);

            if ($this->user->validate() && $this->user->save()) {

                // send verification sms to new phone
                // && YII_ENV !== 'dev'
                if (!is_null($this->user->getPhone())) {
                    $this->user->setSmsCode(\Yii::$app->security->generateRandomString(4));
                    $sendSmsResult = SignupForm::userSendSms($this->user);
                    if ($sendSmsResult) {
                        $this->user->setPhoneSent(date('Y-m-d H:i:s'));
                        $this->user->save();
                    }
                }

                $response = [
                    'result' => true,
                    'smsSent' => $sendSmsResult,
                    'message' => Yii::t('app', 'Телефон успішно змінено!')
                ];
            }
        }

        Yii::$app->response->format = Response::FORMAT_JSON;
        return $response;
    }

    /**
     * Method for checking user phone & validate if user sent valid sms
     *
     * @return array
     */
    public function actionCheckSms()
    {
        $receivedSms = trim(Yii::$app->request->post('smsCode'));
        $userVerificationSms = $this->user->getSmsCode();

        if ($userVerificationSms && $userVerificationSms == $receivedSms) {
            $this->user->setSmsCode(null);
            $this->user->setPhoneApproved(date('Y-m-d H:i:s'));
            $this->user->save();
            $result = true;
        } else {
            $this->user->setPhoneSent(null);
            $this->user->setPhoneApproved(null);
            $this->user->setSmsCode(null);
            $this->user->save();
            $result = false;
        }

        Yii::$app->response->format = Response::FORMAT_JSON;
        return ['result' => $result];
    }

    /**
     * Users changing password method
     *
     * @return mixed
     */
    public function actionChangePassword()
    {
        if (Yii::$app->request->isPost) {
            $changePassword = new ChangePassword();
            $changePassword->old_password = Yii::$app->request->post('old-password');
            $changePassword->new_password = Yii::$app->request->post('new-password');
            $changePassword->confirm_password = Yii::$app->request->post('confirm-password');

            if ($changePassword->validate()) {
                $changePassword->changePassword();

                $result = Yii::$app->mailer->compose()
                    ->setFrom('noreply@blablaprice.com')
                    ->setTo(Yii::$app->user->identity->email)
                    ->setSubject(Yii::t('app', 'Зміна паролю'))
                    ->setTextBody(Yii::t('app', 'Зміна паролю'))
                    ->setHtmlBody('<b>' . Yii::t('app', 'Пароль: ')
                        . '</b> ' . $changePassword->confirm_password
                    )
                    ->send();

                if ($result) {
                    Yii::$app->session->setFlash('success',
                        Yii::t('app', 'Ваш пароль змінено'));
                }
            } else {
                foreach ($changePassword->getErrors() as $error) {
                    Yii::$app->session->setFlash('error', $error);
                }
            }
            return $this->redirect(['cabinet/settings']);
        }
    }

    /**
     * Sends confirmation email to user
     *
     * @return string
     */
    public function actionSendConfirmEmail()
    {
        $response = [
            'result' => false,
            'message' => Yii::t('app', 'Не авторизований користувач')
        ];

        if ($this->user !== null) {

            $userEmailSent = $this->user->getEmailSent();

            if ((is_null($userEmailSent) || $userEmailSent == '0000-00-00 00:00:00') && !is_null($this->user->getEmail())) {

                $emailCode = Yii::$app->security->generateRandomString(32);

                $this->sendConfirmationEmail($emailCode);

                $this->user->setEmailCode($emailCode);
                $this->user->setEmailSent(date('Y-m-d H:i:s'));
                $this->user->save();

                $response = [
                    'result' => true,
                    'message' => Yii::t('app', 'Запит на підтвердження e-mail успішно надіслано!')
                ];
            } elseif (!is_null($userEmailSent)) {
                // check if last time is less then 1 hour
                $userEmailSentTime = StrToTime($userEmailSent);
                $currentTime = StrToTime($userEmailSent);

                $diff = $userEmailSentTime - $currentTime;
                $hours = $diff / (60 * 60);
            }
        }

        return json_encode($response);
    }

    private function sendConfirmationEmail($emailCode)
    {
        $emailSubject = Yii::t('app', 'Підтвердження e-mail на сайті blablaprice.com');

        $confirmationUrl = Url::to(['site/activation', 'code' => $emailCode], true);

        $emailMessage = Yii::t('app', 'Вітаємо!');

        $emailMessage .= "<p>" . Yii::t('app', 'Ви здійснили запит для підтвердження паролю з сайту')
            . Html::a('BlaBlaPrice.com', 'http://blablaprice.com', ['target' => '_blank'])
            . "</p>";

        $emailMessage .= "<p>" . Yii::t('app', 'Для підтвердження вашого e-mail, перейдіть за посиланням :')
            . Html::a(Yii::t('app', 'підтвердження паролю'), $confirmationUrl, ['target' => '_blank']);

        $emailMessage .= "<p>" . Yii::t('app',
                'Якщо посилання не відкривається, будь ласка, скопіюйте наступне посилання та відкрийте у вашому браузері : ')
            . "<br /><strong>" . $confirmationUrl . "</strong>";

        Yii::$app->mailer->compose()
            ->setFrom('noreply@blablaprice.com')
            ->setTo($this->user->getEmail())
            ->setSubject($emailSubject)
            ->setTextBody(Yii::t('app', 'Ви здійснили запит для підтвердження паролю'))
            ->setHtmlBody($emailMessage)
            ->send();
    }


    /**
     * List of private functions
     */

    /**
     *
     * @param null|integer $id
     * @param array $recursive
     * @return array
     */
    private function recursiveSetCategory($id = null, $recursive = [])
    {
        if ($id) {
            $categories = Category::findAll(['parentID' => $id]);
            if ($categories) {
                foreach ($categories as $cat_item) {
                    $recursive[] = $cat_item->ID;
                    $idItem[] = $cat_item->ID;
                }
            } else {
                $idItem = null;
            }
            return $this->recursiveSetCategory($idItem, $recursive);
        } else {
            return $recursive;
        }
    }

    /**
     * @param null $id
     * @param array $recursive
     * @return array
     */
    private function recursiveDisableCategory($id = null, $recursive = [])
    {
        if ($id) {
            $cat = Category::findOne(['ID' => $id]);
            if ($cat) {
                $recursive[] = $cat->parentID;
                $id_item[] = $cat->parentID;
            } else {
                $id_item = null;
            }
            return $this->recursiveDisableCategory($id_item, $recursive);
        } else {
            return $recursive;
        }
    }

    public function actionPayment() {
        return $this->render('seller-payment', [
            'user' => $this->user,
            'title' => $title,
        ]);
    }

    public function actionCallback() {
        $title = 'Payment';
        $post = Yii::$app->request->post();

        if (!empty($post['ORDER_STATUS']) && $post['ORDER_STATUS'] === 'Processed') {
            parse_str($post['CHECKOUT_QUERY_STRING'] ?? '', $queryParams);
            $userId = $queryParams['user_id'] ?? null;
            $plan = $queryParams['plan'];
            $user = User::findOne($userId);
            $amount = floatval($post['ORDER_TOTAL_USD_AMOUNT'] ?? 0.00);
            
            if ($amount > 0) {
                if ($user) {
                    $user->balance += $amount;
                    $point = 0;

                    if ($plan == 'mini') {
                        $point = $_ENV['POINT_MINI'];
                    } else if ($plan == 'standart') {
                        $point = $_ENV['POINT_STANDART'];
                    } else if ($plan == 'max')  {
                        $point = $_ENV['POINT_MAX'];
                    }

                    $user->bal += $point;
                     
                    if ($user->save(false)) {
                        Yii::$app->session->setFlash('success', Yii::t('app', 'Ваш баланс поповнено на ') . $point . ' балів');
                    } else {
                        Yii::$app->session->setFlash('error', Yii::t('app', 'Не вдалося оновити баланс.'));
                    }
                } else {
                    Yii::$app->session->setFlash('error', Yii::t('app', 'Користувача не знайдено.'));
                }
            } else {
                Yii::$app->session->setFlash('error', Yii::t('app', 'Неправильні дані платежу.'));
            }
        } else {
            Yii::$app->session->setFlash('error', Yii::t('app', 'Платіж не підтверджено.'));
        }

        return $this->redirect('/cabinet/payment');
    }
}
